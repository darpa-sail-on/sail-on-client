"""Expected values for different metrics used activity recognition evaluation."""

import pytest


@pytest.fixture(scope="function")
def expected_ar_m_acc_values():
    """Expected Values for m_acc."""
    return {
        "full_top1": 0.1988,
        "full_top3": 0.25602,
        "pre_top1": 0.0,
        "pre_top3": 0.08547,
        "pre_mean_top1": 0.0,
        "pre_std_top1": 0.0,
        "pre_mean_top3": 0.08611111111111112,
        "pre_std_top3": 0.009785276387866007,
        "post_top1": 0.30698,
        "post_top3": 0.34884,
        "post_mean_top1": 0.3324137931034484,
        "post_std_top1": 0.06568198336325369,
        "post_mean_top3": 0.37939655172413805,
        "post_std_top3": 0.08613728973945121,
    }


@pytest.fixture(scope="function")
def expected_ar_m_acc_roundwise_values():
    """Expected Values for m_acc for a round."""
    return {
        "top1_accuracy_round_0": 0.1988,
        "top3_accuracy_round_0": 0.25602,
    }


@pytest.fixture(scope="function")
def expected_ar_m_num_values():
    """Expected Values for m_num."""
    return {
        "0.175": 14,
        "0.225": 14,
        "0.3": 20,
        "0.4": 24,
        "0.5": 24,
        "0.6": 39,
        "0.7": 58,
        "0.8": 58,
        "0.9": 1,
    }


@pytest.fixture(scope="function")
def expected_ar_m_num_stats_values():
    """Expected Values for m_num_stats."""
    return {
        "GT_indx": 117,
        "P_indx_0.175": 161,
        "P_indx_0.225": 161,
        "P_indx_0.3": 182,
        "P_indx_0.4": 193,
        "P_indx_0.5": 193,
        "P_indx_0.6": 225,
        "P_indx_0.7": 257,
        "P_indx_0.8": 257,
        "P_indx_0.9": 333,
    }


@pytest.fixture(scope="function")
def expected_ar_m_ndp_values():
    """Expected Values for m_ndp."""
    return {
        "accuracy_0.175": 0.6988,
        "precision_0.175": 0.49419,
        "recall_0.175": 0.86735,
        "f1_score_0.175": 0.62963,
        "TP_0.175": 85,
        "FP_0.175": 87,
        "TN_0.175": 147,
        "FN_0.175": 13,
        "accuracy_0.225": 0.6988,
        "precision_0.225": 0.49419,
        "recall_0.225": 0.86735,
        "f1_score_0.225": 0.62963,
        "TP_0.225": 85,
        "FP_0.225": 87,
        "TN_0.225": 147,
        "FN_0.225": 13,
        "accuracy_0.3": 0.7259,
        "precision_0.3": 0.52318,
        "recall_0.3": 0.80612,
        "f1_score_0.3": 0.63454,
        "TP_0.3": 79,
        "FP_0.3": 72,
        "TN_0.3": 162,
        "FN_0.3": 19,
        "accuracy_0.4": 0.73494,
        "precision_0.4": 0.53571,
        "recall_0.4": 0.76531,
        "f1_score_0.4": 0.63025,
        "TP_0.4": 75,
        "FP_0.4": 65,
        "TN_0.4": 169,
        "FN_0.4": 23,
        "accuracy_0.5": 0.73494,
        "precision_0.5": 0.53571,
        "recall_0.5": 0.76531,
        "f1_score_0.5": 0.63025,
        "TP_0.5": 75,
        "FP_0.5": 65,
        "TN_0.5": 169,
        "FN_0.5": 23,
        "accuracy_0.6": 0.74096,
        "precision_0.6": 0.55556,
        "recall_0.6": 0.61224,
        "f1_score_0.6": 0.58252,
        "TP_0.6": 60,
        "FP_0.6": 48,
        "TN_0.6": 186,
        "FN_0.6": 38,
        "accuracy_0.7": 0.72289,
        "precision_0.7": 0.53947,
        "recall_0.7": 0.41837,
        "f1_score_0.7": 0.47126,
        "TP_0.7": 41,
        "FP_0.7": 35,
        "TN_0.7": 199,
        "FN_0.7": 57,
        "accuracy_0.8": 0.72289,
        "precision_0.8": 0.53947,
        "recall_0.8": 0.41837,
        "f1_score_0.8": 0.47126,
        "TP_0.8": 41,
        "FP_0.8": 35,
        "TN_0.8": 199,
        "FN_0.8": 57,
        "accuracy_0.9": 0.70482,
        "precision_0.9": 0.0,
        "recall_0.9": 0.0,
        "f1_score_0.9": 0.0,
        "TP_0.9": 0,
        "FP_0.9": 0,
        "TN_0.9": 234,
        "FN_0.9": 98,
    }


@pytest.fixture(scope="function")
def expected_ar_m_ndp_pre_values():
    """Expected Values for m_ndp_pre."""
    return {
        "accuracy_0.175": 1.0,
        "precision_0.175": 0.0,
        "recall_0.175": 0.0,
        "f1_score_0.175": 0.0,
        "TP_0.175": 0,
        "FP_0.175": 0,
        "TN_0.175": 116,
        "FN_0.175": 0,
        "accuracy_0.225": 1.0,
        "precision_0.225": 0.0,
        "recall_0.225": 0.0,
        "f1_score_0.225": 0.0,
        "TP_0.225": 0,
        "FP_0.225": 0,
        "TN_0.225": 116,
        "FN_0.225": 0,
        "accuracy_0.3": 1.0,
        "precision_0.3": 0.0,
        "recall_0.3": 0.0,
        "f1_score_0.3": 0.0,
        "TP_0.3": 0,
        "FP_0.3": 0,
        "TN_0.3": 116,
        "FN_0.3": 0,
        "accuracy_0.4": 1.0,
        "precision_0.4": 0.0,
        "recall_0.4": 0.0,
        "f1_score_0.4": 0.0,
        "TP_0.4": 0,
        "FP_0.4": 0,
        "TN_0.4": 116,
        "FN_0.4": 0,
        "accuracy_0.5": 1.0,
        "precision_0.5": 0.0,
        "recall_0.5": 0.0,
        "f1_score_0.5": 0.0,
        "TP_0.5": 0,
        "FP_0.5": 0,
        "TN_0.5": 116,
        "FN_0.5": 0,
        "accuracy_0.6": 1.0,
        "precision_0.6": 0.0,
        "recall_0.6": 0.0,
        "f1_score_0.6": 0.0,
        "TP_0.6": 0,
        "FP_0.6": 0,
        "TN_0.6": 116,
        "FN_0.6": 0,
        "accuracy_0.7": 1.0,
        "precision_0.7": 0.0,
        "recall_0.7": 0.0,
        "f1_score_0.7": 0.0,
        "TP_0.7": 0,
        "FP_0.7": 0,
        "TN_0.7": 116,
        "FN_0.7": 0,
        "accuracy_0.8": 1.0,
        "precision_0.8": 0.0,
        "recall_0.8": 0.0,
        "f1_score_0.8": 0.0,
        "TP_0.8": 0,
        "FP_0.8": 0,
        "TN_0.8": 116,
        "FN_0.8": 0,
        "accuracy_0.9": 1.0,
        "precision_0.9": 0.0,
        "recall_0.9": 0.0,
        "f1_score_0.9": 0.0,
        "TP_0.9": 0,
        "FP_0.9": 0,
        "TN_0.9": 116,
        "FN_0.9": 0,
    }


@pytest.fixture(scope="function")
def expected_ar_m_ndp_post_values():
    """Expected Values for m_ndp_post."""
    return {
        "accuracy_0.175": 0.53704,
        "precision_0.175": 0.49419,
        "recall_0.175": 0.86735,
        "f1_score_0.175": 0.62963,
        "TP_0.175": 85,
        "FP_0.175": 87,
        "TN_0.175": 31,
        "FN_0.175": 13,
        "accuracy_0.225": 0.53704,
        "precision_0.225": 0.49419,
        "recall_0.225": 0.86735,
        "f1_score_0.225": 0.62963,
        "TP_0.225": 85,
        "FP_0.225": 87,
        "TN_0.225": 31,
        "FN_0.225": 13,
        "accuracy_0.3": 0.5787,
        "precision_0.3": 0.52318,
        "recall_0.3": 0.80612,
        "f1_score_0.3": 0.63454,
        "TP_0.3": 79,
        "FP_0.3": 72,
        "TN_0.3": 46,
        "FN_0.3": 19,
        "accuracy_0.4": 0.59259,
        "precision_0.4": 0.53571,
        "recall_0.4": 0.76531,
        "f1_score_0.4": 0.63025,
        "TP_0.4": 75,
        "FP_0.4": 65,
        "TN_0.4": 53,
        "FN_0.4": 23,
        "accuracy_0.5": 0.59259,
        "precision_0.5": 0.53571,
        "recall_0.5": 0.76531,
        "f1_score_0.5": 0.63025,
        "TP_0.5": 75,
        "FP_0.5": 65,
        "TN_0.5": 53,
        "FN_0.5": 23,
        "accuracy_0.6": 0.60185,
        "precision_0.6": 0.55556,
        "recall_0.6": 0.61224,
        "f1_score_0.6": 0.58252,
        "TP_0.6": 60,
        "FP_0.6": 48,
        "TN_0.6": 70,
        "FN_0.6": 38,
        "accuracy_0.7": 0.57407,
        "precision_0.7": 0.53947,
        "recall_0.7": 0.41837,
        "f1_score_0.7": 0.47126,
        "TP_0.7": 41,
        "FP_0.7": 35,
        "TN_0.7": 83,
        "FN_0.7": 57,
        "accuracy_0.8": 0.57407,
        "precision_0.8": 0.53947,
        "recall_0.8": 0.41837,
        "f1_score_0.8": 0.47126,
        "TP_0.8": 41,
        "FP_0.8": 35,
        "TN_0.8": 83,
        "FN_0.8": 57,
        "accuracy_0.9": 0.5463,
        "precision_0.9": 0.0,
        "recall_0.9": 0.0,
        "f1_score_0.9": 0.0,
        "TP_0.9": 0,
        "FP_0.9": 0,
        "TN_0.9": 118,
        "FN_0.9": 98,
    }


@pytest.fixture(scope="function")
def expected_ar_m_ndp_failed_values():
    """Expected Values for m_ndp_failed."""
    return {
        "top1_accuracy_0.175": 0.65789,
        "top1_precision_0.175": 0.24348,
        "top1_recall_0.175": 0.875,
        "top1_f1_score_0.175": 0.38095,
        "top1_TP_0.175": 28,
        "top1_FP_0.175": 87,
        "top1_TN_0.175": 147,
        "top1_FN_0.175": 4,
        "top1_accuracy_0.225": 0.65789,
        "top1_precision_0.225": 0.24348,
        "top1_recall_0.225": 0.875,
        "top1_f1_score_0.225": 0.38095,
        "top1_TP_0.225": 28,
        "top1_FP_0.225": 87,
        "top1_TN_0.225": 147,
        "top1_FN_0.225": 4,
        "top1_accuracy_0.3": 0.70301,
        "top1_precision_0.3": 0.25773,
        "top1_recall_0.3": 0.78125,
        "top1_f1_score_0.3": 0.3876,
        "top1_TP_0.3": 25,
        "top1_FP_0.3": 72,
        "top1_TN_0.3": 162,
        "top1_FN_0.3": 7,
        "top1_accuracy_0.4": 0.72556,
        "top1_precision_0.4": 0.26966,
        "top1_recall_0.4": 0.75,
        "top1_f1_score_0.4": 0.39669,
        "top1_TP_0.4": 24,
        "top1_FP_0.4": 65,
        "top1_TN_0.4": 169,
        "top1_FN_0.4": 8,
        "top1_accuracy_0.5": 0.72556,
        "top1_precision_0.5": 0.26966,
        "top1_recall_0.5": 0.75,
        "top1_f1_score_0.5": 0.39669,
        "top1_TP_0.5": 24,
        "top1_FP_0.5": 65,
        "top1_TN_0.5": 169,
        "top1_FN_0.5": 8,
        "top1_accuracy_0.6": 0.76692,
        "top1_precision_0.6": 0.27273,
        "top1_recall_0.6": 0.5625,
        "top1_f1_score_0.6": 0.36735,
        "top1_TP_0.6": 18,
        "top1_FP_0.6": 48,
        "top1_TN_0.6": 186,
        "top1_FN_0.6": 14,
        "top1_accuracy_0.7": 0.80451,
        "top1_precision_0.7": 0.3,
        "top1_recall_0.7": 0.46875,
        "top1_f1_score_0.7": 0.36585,
        "top1_TP_0.7": 15,
        "top1_FP_0.7": 35,
        "top1_TN_0.7": 199,
        "top1_FN_0.7": 17,
        "top1_accuracy_0.8": 0.80451,
        "top1_precision_0.8": 0.3,
        "top1_recall_0.8": 0.46875,
        "top1_f1_score_0.8": 0.36585,
        "top1_TP_0.8": 15,
        "top1_FP_0.8": 35,
        "top1_TN_0.8": 199,
        "top1_FN_0.8": 17,
        "top1_accuracy_0.9": 0.8797,
        "top1_precision_0.9": 0.0,
        "top1_recall_0.9": 0.0,
        "top1_f1_score_0.9": 0.0,
        "top1_TP_0.9": 0,
        "top1_FP_0.9": 0,
        "top1_TN_0.9": 234,
        "top1_FN_0.9": 32,
        "top3_accuracy_0.175": 0.66397,
        "top3_precision_0.175": 0.26168,
        "top3_recall_0.175": 0.875,
        "top3_f1_score_0.175": 0.40288,
        "top3_TP_0.175": 28,
        "top3_FP_0.175": 79,
        "top3_TN_0.175": 136,
        "top3_FN_0.175": 4,
        "top3_accuracy_0.225": 0.66397,
        "top3_precision_0.225": 0.26168,
        "top3_recall_0.225": 0.875,
        "top3_f1_score_0.225": 0.40288,
        "top3_TP_0.225": 28,
        "top3_FP_0.225": 79,
        "top3_TN_0.225": 136,
        "top3_FN_0.225": 4,
        "top3_accuracy_0.3": 0.7085,
        "top3_precision_0.3": 0.27778,
        "top3_recall_0.3": 0.78125,
        "top3_f1_score_0.3": 0.40984,
        "top3_TP_0.3": 25,
        "top3_FP_0.3": 65,
        "top3_TN_0.3": 150,
        "top3_FN_0.3": 7,
        "top3_accuracy_0.4": 0.73279,
        "top3_precision_0.4": 0.29268,
        "top3_recall_0.4": 0.75,
        "top3_f1_score_0.4": 0.42105,
        "top3_TP_0.4": 24,
        "top3_FP_0.4": 58,
        "top3_TN_0.4": 157,
        "top3_FN_0.4": 8,
        "top3_accuracy_0.5": 0.73279,
        "top3_precision_0.5": 0.29268,
        "top3_recall_0.5": 0.75,
        "top3_f1_score_0.5": 0.42105,
        "top3_TP_0.5": 24,
        "top3_FP_0.5": 58,
        "top3_TN_0.5": 157,
        "top3_FN_0.5": 8,
        "top3_accuracy_0.6": 0.77733,
        "top3_precision_0.6": 0.30508,
        "top3_recall_0.6": 0.5625,
        "top3_f1_score_0.6": 0.3956,
        "top3_TP_0.6": 18,
        "top3_FP_0.6": 41,
        "top3_TN_0.6": 174,
        "top3_FN_0.6": 14,
        "top3_accuracy_0.7": 0.80567,
        "top3_precision_0.7": 0.32609,
        "top3_recall_0.7": 0.46875,
        "top3_f1_score_0.7": 0.38462,
        "top3_TP_0.7": 15,
        "top3_FP_0.7": 31,
        "top3_TN_0.7": 184,
        "top3_FN_0.7": 17,
        "top3_accuracy_0.8": 0.80567,
        "top3_precision_0.8": 0.32609,
        "top3_recall_0.8": 0.46875,
        "top3_f1_score_0.8": 0.38462,
        "top3_TP_0.8": 15,
        "top3_FP_0.8": 31,
        "top3_TN_0.8": 184,
        "top3_FN_0.8": 17,
        "top3_accuracy_0.9": 0.87045,
        "top3_precision_0.9": 0.0,
        "top3_recall_0.9": 0.0,
        "top3_f1_score_0.9": 0.0,
        "top3_TP_0.9": 0,
        "top3_FP_0.9": 0,
        "top3_TN_0.9": 215,
        "top3_FN_0.9": 32,
    }


@pytest.fixture(scope="function")
def expected_ar_m_nrp_values():
    """Expected Values for m_nrp."""
    return {
        "M_nrp_post_top3": 35.490533212603395,
        "M_nrp_post_top1": 31.505808941253743,
    }
