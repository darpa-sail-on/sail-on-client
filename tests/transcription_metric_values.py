"""Expected values of transcription metrics."""

import pytest


@pytest.fixture(scope="function")
def expected_dt_m_acc_values():
    """Expected Values for m_acc."""
    return {
        "full_top1": 0.76953,
        "full_top3": 0.91211,
        "pre_top1": 0.77407,
        "pre_top3": 0.95185,
        "pre_mean_top1": 0.772748538011696,
        "pre_std_top1": 0.014268061234079048,
        "pre_mean_top3": 0.9513450292397663,
        "pre_std_top3": 0.012553565997908548,
        "post_top1": 0.76446,
        "post_top3": 0.86777,
        "post_mean_top1": 0.7381818181818183,
        "post_std_top1": 0.024741946011694067,
        "post_mean_top3": 0.8565734265734264,
        "post_std_top3": 0.026513480363634104,
        "asymptotic_500_top1": 0.766,
        "asymptotic_500_top3": 0.91,
        "asymptotic_500_mean_top1": 0.7512219451371571,
        "asymptotic_500_std_top1": 0.026253630552877518,
        "asymptotic_500_mean_top3": 0.9010224438902742,
        "asymptotic_500_std_top3": 0.04564758476647443,
    }


@pytest.fixture(scope="function")
def expected_dt_m_num_values():
    """Expected Values for m_num."""
    return {
        "0.175": 1,
        "0.225": 1,
        "0.3": 1,
        "0.4": 1,
        "0.5": 1,
        "0.6": 1,
        "0.7": 2,
        "0.8": 2,
        "0.9": 2,
    }


@pytest.fixture(scope="function")
def expected_dt_m_acc_roundwise_values():
    """Expected m_acc values for a round."""
    return {"top1_accuracy_round_0": 0.76953, "top3_accuracy_round_0": 0.91211}


@pytest.fixture(scope="function")
def expected_dt_m_num_stats_values():
    """Expected Values for m_num_stats."""
    return {
        "GT_indx": 270,
        "P_indx_0.175": 1,
        "P_indx_0.225": 1,
        "P_indx_0.3": 1,
        "P_indx_0.4": 5,
        "P_indx_0.5": 5,
        "P_indx_0.6": 5,
        "P_indx_0.7": 5,
        "P_indx_0.8": 23,
        "P_indx_0.9": 30,
    }


@pytest.fixture(scope="function")
def expected_dt_m_ndp_values():
    """Expected Values for m_ndp."""
    return {
        "accuracy_0.175": 0.63086,
        "precision_0.175": 0.38889,
        "recall_0.175": 0.98347,
        "f1_score_0.175": 0.55738,
        "TP_0.175": 119,
        "FP_0.175": 187,
        "TN_0.175": 204,
        "FN_0.175": 2,
        "accuracy_0.225": 0.64844,
        "precision_0.225": 0.4,
        "recall_0.225": 0.97521,
        "f1_score_0.225": 0.56731,
        "TP_0.225": 118,
        "FP_0.225": 177,
        "TN_0.225": 214,
        "FN_0.225": 3,
        "accuracy_0.3": 0.69141,
        "precision_0.3": 0.43123,
        "recall_0.3": 0.95868,
        "f1_score_0.3": 0.59487,
        "TP_0.3": 116,
        "FP_0.3": 153,
        "TN_0.3": 238,
        "FN_0.3": 5,
        "accuracy_0.4": 0.74805,
        "precision_0.4": 0.48131,
        "recall_0.4": 0.85124,
        "f1_score_0.4": 0.61493,
        "TP_0.4": 103,
        "FP_0.4": 111,
        "TN_0.4": 280,
        "FN_0.4": 18,
        "accuracy_0.5": 0.82227,
        "precision_0.5": 0.61029,
        "recall_0.5": 0.68595,
        "f1_score_0.5": 0.64591,
        "TP_0.5": 83,
        "FP_0.5": 53,
        "TN_0.5": 338,
        "FN_0.5": 38,
        "accuracy_0.6": 0.83008,
        "precision_0.6": 0.66667,
        "recall_0.6": 0.56198,
        "f1_score_0.6": 0.60987,
        "TP_0.6": 68,
        "FP_0.6": 34,
        "TN_0.6": 357,
        "FN_0.6": 53,
        "accuracy_0.7": 0.83008,
        "precision_0.7": 0.71795,
        "recall_0.7": 0.46281,
        "f1_score_0.7": 0.56281,
        "TP_0.7": 56,
        "FP_0.7": 22,
        "TN_0.7": 369,
        "FN_0.7": 65,
        "accuracy_0.8": 0.80664,
        "precision_0.8": 0.7037,
        "recall_0.8": 0.31405,
        "f1_score_0.8": 0.43429,
        "TP_0.8": 38,
        "FP_0.8": 16,
        "TN_0.8": 375,
        "FN_0.8": 83,
        "accuracy_0.9": 0.79688,
        "precision_0.9": 0.81481,
        "recall_0.9": 0.18182,
        "f1_score_0.9": 0.2973,
        "TP_0.9": 22,
        "FP_0.9": 5,
        "TN_0.9": 386,
        "FN_0.9": 99,
    }


@pytest.fixture(scope="function")
def expected_dt_m_ndp_pre_values():
    """Expected Values for m_ndp_pre."""
    return {
        "accuracy_0.175": 0.5316,
        "precision_0.175": 0.0,
        "recall_0.175": 0.0,
        "f1_score_0.175": 0.0,
        "TP_0.175": 0,
        "FP_0.175": 126,
        "TN_0.175": 143,
        "FN_0.175": 0,
        "accuracy_0.225": 0.56134,
        "precision_0.225": 0.0,
        "recall_0.225": 0.0,
        "f1_score_0.225": 0.0,
        "TP_0.225": 0,
        "FP_0.225": 118,
        "TN_0.225": 151,
        "FN_0.225": 0,
        "accuracy_0.3": 0.62825,
        "precision_0.3": 0.0,
        "recall_0.3": 0.0,
        "f1_score_0.3": 0.0,
        "TP_0.3": 0,
        "FP_0.3": 100,
        "TN_0.3": 169,
        "FN_0.3": 0,
        "accuracy_0.4": 0.73978,
        "precision_0.4": 0.0,
        "recall_0.4": 0.0,
        "f1_score_0.4": 0.0,
        "TP_0.4": 0,
        "FP_0.4": 70,
        "TN_0.4": 199,
        "FN_0.4": 0,
        "accuracy_0.5": 0.86617,
        "precision_0.5": 0.0,
        "recall_0.5": 0.0,
        "f1_score_0.5": 0.0,
        "TP_0.5": 0,
        "FP_0.5": 36,
        "TN_0.5": 233,
        "FN_0.5": 0,
        "accuracy_0.6": 0.9145,
        "precision_0.6": 0.0,
        "recall_0.6": 0.0,
        "f1_score_0.6": 0.0,
        "TP_0.6": 0,
        "FP_0.6": 23,
        "TN_0.6": 246,
        "FN_0.6": 0,
        "accuracy_0.7": 0.94796,
        "precision_0.7": 0.0,
        "recall_0.7": 0.0,
        "f1_score_0.7": 0.0,
        "TP_0.7": 0,
        "FP_0.7": 14,
        "TN_0.7": 255,
        "FN_0.7": 0,
        "accuracy_0.8": 0.95911,
        "precision_0.8": 0.0,
        "recall_0.8": 0.0,
        "f1_score_0.8": 0.0,
        "TP_0.8": 0,
        "FP_0.8": 11,
        "TN_0.8": 258,
        "FN_0.8": 0,
        "accuracy_0.9": 0.98885,
        "precision_0.9": 0.0,
        "recall_0.9": 0.0,
        "f1_score_0.9": 0.0,
        "TP_0.9": 0,
        "FP_0.9": 3,
        "TN_0.9": 266,
        "FN_0.9": 0,
    }


@pytest.fixture(scope="function")
def expected_dt_m_ndp_post_values():
    """Expected Values for m_ndp_post."""
    return {
        "accuracy_0.175": 0.74074,
        "precision_0.175": 0.66111,
        "recall_0.175": 0.98347,
        "f1_score_0.175": 0.7907,
        "TP_0.175": 119,
        "FP_0.175": 61,
        "TN_0.175": 61,
        "FN_0.175": 2,
        "accuracy_0.225": 0.74486,
        "precision_0.225": 0.66667,
        "recall_0.225": 0.97521,
        "f1_score_0.225": 0.79195,
        "TP_0.225": 118,
        "FP_0.225": 59,
        "TN_0.225": 63,
        "FN_0.225": 3,
        "accuracy_0.3": 0.76132,
        "precision_0.3": 0.68639,
        "recall_0.3": 0.95868,
        "f1_score_0.3": 0.8,
        "TP_0.3": 116,
        "FP_0.3": 53,
        "TN_0.3": 69,
        "FN_0.3": 5,
        "accuracy_0.4": 0.7572,
        "precision_0.4": 0.71528,
        "recall_0.4": 0.85124,
        "f1_score_0.4": 0.77736,
        "TP_0.4": 103,
        "FP_0.4": 41,
        "TN_0.4": 81,
        "FN_0.4": 18,
        "accuracy_0.5": 0.77366,
        "precision_0.5": 0.83,
        "recall_0.5": 0.68595,
        "f1_score_0.5": 0.75113,
        "TP_0.5": 83,
        "FP_0.5": 17,
        "TN_0.5": 105,
        "FN_0.5": 38,
        "accuracy_0.6": 0.73663,
        "precision_0.6": 0.86076,
        "recall_0.6": 0.56198,
        "f1_score_0.6": 0.68,
        "TP_0.6": 68,
        "FP_0.6": 11,
        "TN_0.6": 111,
        "FN_0.6": 53,
        "accuracy_0.7": 0.69959,
        "precision_0.7": 0.875,
        "recall_0.7": 0.46281,
        "f1_score_0.7": 0.60541,
        "TP_0.7": 56,
        "FP_0.7": 8,
        "TN_0.7": 114,
        "FN_0.7": 65,
        "accuracy_0.8": 0.63786,
        "precision_0.8": 0.88372,
        "recall_0.8": 0.31405,
        "f1_score_0.8": 0.46341,
        "TP_0.8": 38,
        "FP_0.8": 5,
        "TN_0.8": 117,
        "FN_0.8": 83,
        "accuracy_0.9": 0.58436,
        "precision_0.9": 0.91667,
        "recall_0.9": 0.18182,
        "f1_score_0.9": 0.30345,
        "TP_0.9": 22,
        "FP_0.9": 2,
        "TN_0.9": 120,
        "FN_0.9": 99,
    }


@pytest.fixture(scope="function")
def expected_dt_m_ndp_failed_values():
    """Expected Values for m_ndp_failed."""
    return {
        "top1_accuracy_0.175": 0.22034,
        "top1_precision_0.175": 0.22414,
        "top1_recall_0.175": 0.92857,
        "top1_f1_score_0.175": 0.36111,
        "top1_TP_0.175": 26,
        "top1_FP_0.175": 90,
        "top1_TN_0.175": 0,
        "top1_FN_0.175": 2,
        "top1_accuracy_0.225": 0.21186,
        "top1_precision_0.225": 0.21739,
        "top1_recall_0.225": 0.89286,
        "top1_f1_score_0.225": 0.34965,
        "top1_TP_0.225": 25,
        "top1_FP_0.225": 90,
        "top1_TN_0.225": 0,
        "top1_FN_0.225": 3,
        "top1_accuracy_0.3": 0.19492,
        "top1_precision_0.3": 0.20354,
        "top1_recall_0.3": 0.82143,
        "top1_f1_score_0.3": 0.32624,
        "top1_TP_0.3": 23,
        "top1_FP_0.3": 90,
        "top1_TN_0.3": 0,
        "top1_FN_0.3": 5,
        "top1_accuracy_0.4": 0.18644,
        "top1_precision_0.4": 0.12222,
        "top1_recall_0.4": 0.39286,
        "top1_f1_score_0.4": 0.18644,
        "top1_TP_0.4": 11,
        "top1_FP_0.4": 79,
        "top1_TN_0.4": 11,
        "top1_FN_0.4": 17,
        "top1_accuracy_0.5": 0.33898,
        "top1_precision_0.5": 0.0,
        "top1_recall_0.5": 0.0,
        "top1_f1_score_0.5": 0.0,
        "top1_TP_0.5": 0,
        "top1_FP_0.5": 50,
        "top1_TN_0.5": 40,
        "top1_FN_0.5": 28,
        "top1_accuracy_0.6": 0.47458,
        "top1_precision_0.6": 0.0,
        "top1_recall_0.6": 0.0,
        "top1_f1_score_0.6": 0.0,
        "top1_TP_0.6": 0,
        "top1_FP_0.6": 34,
        "top1_TN_0.6": 56,
        "top1_FN_0.6": 28,
        "top1_accuracy_0.7": 0.57627,
        "top1_precision_0.7": 0.0,
        "top1_recall_0.7": 0.0,
        "top1_f1_score_0.7": 0.0,
        "top1_TP_0.7": 0,
        "top1_FP_0.7": 22,
        "top1_TN_0.7": 68,
        "top1_FN_0.7": 28,
        "top1_accuracy_0.8": 0.62712,
        "top1_precision_0.8": 0.0,
        "top1_recall_0.8": 0.0,
        "top1_f1_score_0.8": 0.0,
        "top1_TP_0.8": 0,
        "top1_FP_0.8": 16,
        "top1_TN_0.8": 74,
        "top1_FN_0.8": 28,
        "top1_accuracy_0.9": 0.72034,
        "top1_precision_0.9": 0.0,
        "top1_recall_0.9": 0.0,
        "top1_f1_score_0.9": 0.0,
        "top1_TP_0.9": 0,
        "top1_FP_0.9": 5,
        "top1_TN_0.9": 85,
        "top1_FN_0.9": 28,
        "top3_accuracy_0.175": 0.44444,
        "top3_precision_0.175": 0.46512,
        "top3_recall_0.175": 0.90909,
        "top3_f1_score_0.175": 0.61538,
        "top3_TP_0.175": 20,
        "top3_FP_0.175": 23,
        "top3_TN_0.175": 0,
        "top3_FN_0.175": 2,
        "top3_accuracy_0.225": 0.42222,
        "top3_precision_0.225": 0.45238,
        "top3_recall_0.225": 0.86364,
        "top3_f1_score_0.225": 0.59375,
        "top3_TP_0.225": 19,
        "top3_FP_0.225": 23,
        "top3_TN_0.225": 0,
        "top3_FN_0.225": 3,
        "top3_accuracy_0.3": 0.37778,
        "top3_precision_0.3": 0.425,
        "top3_recall_0.3": 0.77273,
        "top3_f1_score_0.3": 0.54839,
        "top3_TP_0.3": 17,
        "top3_FP_0.3": 23,
        "top3_TN_0.3": 0,
        "top3_FN_0.3": 5,
        "top3_accuracy_0.4": 0.17778,
        "top3_precision_0.4": 0.22222,
        "top3_recall_0.4": 0.27273,
        "top3_f1_score_0.4": 0.2449,
        "top3_TP_0.4": 6,
        "top3_FP_0.4": 21,
        "top3_TN_0.4": 2,
        "top3_FN_0.4": 16,
        "top3_accuracy_0.5": 0.17778,
        "top3_precision_0.5": 0.0,
        "top3_recall_0.5": 0.0,
        "top3_f1_score_0.5": 0.0,
        "top3_TP_0.5": 0,
        "top3_FP_0.5": 15,
        "top3_TN_0.5": 8,
        "top3_FN_0.5": 22,
        "top3_accuracy_0.6": 0.24444,
        "top3_precision_0.6": 0.0,
        "top3_recall_0.6": 0.0,
        "top3_f1_score_0.6": 0.0,
        "top3_TP_0.6": 0,
        "top3_FP_0.6": 12,
        "top3_TN_0.6": 11,
        "top3_FN_0.6": 22,
        "top3_accuracy_0.7": 0.33333,
        "top3_precision_0.7": 0.0,
        "top3_recall_0.7": 0.0,
        "top3_f1_score_0.7": 0.0,
        "top3_TP_0.7": 0,
        "top3_FP_0.7": 8,
        "top3_TN_0.7": 15,
        "top3_FN_0.7": 22,
        "top3_accuracy_0.8": 0.35556,
        "top3_precision_0.8": 0.0,
        "top3_recall_0.8": 0.0,
        "top3_f1_score_0.8": 0.0,
        "top3_TP_0.8": 0,
        "top3_FP_0.8": 7,
        "top3_TN_0.8": 16,
        "top3_FN_0.8": 22,
        "top3_accuracy_0.9": 0.48889,
        "top3_precision_0.9": 0.0,
        "top3_recall_0.9": 0.0,
        "top3_f1_score_0.9": 0.0,
        "top3_TP_0.9": 0,
        "top3_FP_0.9": 1,
        "top3_TN_0.9": 22,
        "top3_FN_0.9": 22,
    }


@pytest.fixture(scope="function")
def expected_dt_m_nrp_values():
    """Expected Values for m_nrp."""
    return {"M_nrp_post_top3": 86.777, "M_nrp_post_top1": 76.446}
