name: CI

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  build:
    name: build all repositories
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sail on client
        uses: actions/checkout@v2
        with:
          path: sail-on-client
      - name: Checkout tinker engine
        uses: actions/checkout@v2
        with:
          repository: tinker-engine/tinker-engine
          path: tinker-engine
      - name: Checkout sail on api
        uses: actions/checkout@v2
        with:
          repository: darpa-sail-on/sail-on-api
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: Sail-On-API
      - name: Checkout sail on evaluate
        uses: actions/checkout@v2
        with:
          repository: darpa-sail-on/sail_on_evaluate
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: Sail_On_Evaluate
      - name: Checkout sail on tinker launcher
        uses: actions/checkout@v2
        with:
          repository: darpa-sail-on/sailon_tinker_launcher
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: sailon_tinker_launcher

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'

      - name: Install poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.local/share/poetry-virtualenvs

      - name: Capture poetry version
        run: echo "::set-output name=poetry-version::$(poetry --version | sed 's/[()]//g')"
        id: poetry-version

      - name: Cache additional repositories
        uses: actions/cache@v2
        id: repo-cache
        with:
          path: |
           tinker-engine
           Sail-On-API
           Sail_On_Evaluate
           sailon_tinker_launcher
          key: ${{ runner.os }}-repositories-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Cache Poetry environment
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.local/share/poetry-virtualenvs
          key: ${{ runner.os }}-repositories-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Install Using Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: sail-on-client

  lint:
    needs: build
    name: Run linting on sail on client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sail on client
        uses: actions/checkout@v2
        with:
          path: sail-on-client
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'

      - name: Install poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.local/share/poetry-virtualenvs

      - name: Capture poetry version
        run: echo "::set-output name=poetry-version::$(poetry --version | sed 's/[()]//g')"
        id: poetry-version

      - name: Cache additional repositories
        uses: actions/cache@v2
        with:
          path: |
           tinker-engine
           Sail-On-API
           Sail_On_Evaluate
           sailon_tinker_launcher
          key: ${{ runner.os }}-repositories-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Cache Pipenv environment
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/poetry-virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Install Using Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: sail-on-client

      - name: Run linting
        run: poetry run flake8
        working-directory: sail-on-client

  typecheck:
    needs: build
    name: Run typechecking on sail on client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sail on client
        uses: actions/checkout@v2
        with:
          path: sail-on-client
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'

      - name: Install poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.local/share/poetry-virtualenvs

      - name: Capture poetry version
        run: echo "::set-output name=poetry-version::$(poetry --version | sed 's/[()]//g')"
        id: poetry-version

      - name: Cache additional repositories
        uses: actions/cache@v2
        with:
          path: |
           tinker-engine
           Sail-On-API
           Sail_On_Evaluate
           sailon_tinker_launcher
          key: ${{ runner.os }}-repositories-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Cache Poetry environment
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/poetry-virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Install Using Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: sail-on-client

      - name: Run typechecking
        run: poetry run mypy -p sail_on_client --disallow-untyped-defs
        working-directory: sail-on-client

  test-with-coverage:
    needs: build
    name: Run test and generate coverage report on sail on client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sail on client
        uses: actions/checkout@v2
        with:
          path: sail-on-client
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'

      - name: Install poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.local/share/poetry-virtualenvs

      - name: Capture poetry version
        run: echo "::set-output name=poetry-version::$(poetry --version | sed 's/[()]//g')"
        id: poetry-version

      - name: Cache additional repositories
        uses: actions/cache@v2
        with:
          path: |
           tinker-engine
           Sail-On-API
           Sail_On_Evaluate
           sailon_tinker_launcher
          key: ${{ runner.os }}-repositories-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Cache Poetry environment
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/poetry-virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('sail-on-client/Pipfile.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Install Using Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: sail-on-client

      - name: Run Test with coverage
        run: poetry run coverage run --source=. -m pytest tests
        working-directory: sail-on-client

      - name: Generate coverage report
        run: |
          poetry run coverage report -m
          coverage xml
        working-directory: sail-on-client

      - name: Upload coverage report to code cov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
          files: ./sail-on-client/coverage.xml

  pages:
    needs: build
    name: Generate documentation and upload it on pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sail on client
        uses: actions/checkout@v2
        with:
          path: sail-on-client
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'

      - name: Install poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: false
          virtualenvs-path: ~/.local/share/poetry-virtualenvs

      - name: Capture poetry version
        run: echo "::set-output name=poetry-version::$(poetry --version | sed 's/[()]//g')"
        id: poetry-version

      - name: Cache additional repositories
        uses: actions/cache@v2
        with:
          path: |
           tinker-engine
           Sail-On-API
           Sail_On_Evaluate
           sailon_tinker_launcher
          key: ${{ runner.os }}-repositories-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Cache poetry environment
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/poetry-virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('sail-on-client/poetry.lock') }}-${{ steps.poetry-version.outputs.poetry-version }}-${{ secrets.CACHE_VERSION }}

      - name: Install Using Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install
        working-directory: sail-on-client

      - name: Generate docs
        run: poetry run sphinx-build docs/source/ docs/build/html/
        working-directory: sail-on-client

      - name: Upload docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./sail-on-client/docs/build/html

